import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Block, BlockType } from './block.model';
import { v4 as uuid } from 'uuid';

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –±–ª–æ–∫–æ–≤.
 * section ‚Üí –ª—é–±—ã–µ, –Ω–æ —Å–∞–º—É section –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏.
 */
const ALLOWED: Record<BlockType, BlockType[]> = {
  paragraph: [],
  code:      [],
  list:      ['paragraph'],
  table:     ['paragraph', 'code', 'list'],
  section:   ['paragraph', 'code', 'list', 'table', 'section']
};

@Injectable({ providedIn: 'root' })
export class BlockService {
  private blocksSub = new BehaviorSubject<Block[]>([]);
  readonly blocks$  = this.blocksSub.asObservable();

  private get blocks() { return this.blocksSub.value; }
  private emit(b: Block[]) { this.blocksSub.next(b); }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  private makeBlock(type: BlockType): Block {
    const id = uuid();
    switch (type) {
      case 'paragraph': return { id, type, data: '' };
      case 'code':      return { id, type, data: { code: '', language: 'plaintext' } };
      case 'list':      return { id, type, data: { ordered: false },               children: [] };
      case 'section':   return { id, type, data: { title: 'New section' },         children: [] };
      case 'table':
        const cell = () => this.makeBlock('paragraph');
        return {
          id, type,
          data:  { rows: 2, cols: 2 },
          table: [ [cell(), cell()], [cell(), cell()] ]
        };
    }
  }

  /* —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –º–∞–ø–ø–µ—Ä: –ø—Ä–∏–º–µ–Ω—è–µ–º fn –∫ –∫–∞–∂–¥–æ–º—É –±–ª–æ–∫—É –≤ –¥–µ—Ä–µ–≤–µ */
  private mapRecursive(blocks: Block[], fn: (b: Block) => void): Block[] {
    return blocks.map(orig => {
      const b: Block = { ...orig };
      fn(b);
      if (b.children) b.children = this.mapRecursive(b.children, fn);
      if (b.table) {
        b.table = b.table.map(row =>
          row.map(cell => {
            const c = { ...cell };
            fn(c);
            if (c.children) c.children = this.mapRecursive(c.children, fn);
            return c;
          })
        );
      }
      return b;
    });
  }

  /* —Ñ–∏–ª—å—Ç—Ä –¥–µ—Ä–µ–≤–∞ ‚Äî —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ removeBlock) */
  private filterRecursive(blocks: Block[], id: string): Block[] {
    return blocks
      .filter(b => b.id !== id)
      .map(b => ({
        ...b,
        children: b.children ? this.filterRecursive(b.children, id) : undefined,
        table:    b.table    ? b.table.map(r => this.filterRecursive(r, id)) : undefined
      }));
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ public¬†API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  /** –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –Ω–∞ –ö–û–†–ù–ï–í–û–ô —É—Ä–æ–≤–µ–Ω—å (toolbar —Å–≤–µ—Ä—Ö—É) */
  addBlock(type: BlockType) {
    if (type !== 'section') {
      console.warn('–ù–∞ –∫–æ—Ä–Ω–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ Section');
      return;
    }
    this.emit([...this.blocks, this.makeBlock(type)]);
  }

  /** –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–π –±–ª–æ–∫ –∫ parentId —Å —É—á—ë—Ç–æ–º –∫–∞—Ä—Ç—ã ALLOWED */
  addChildBlock(parentId: string, type: BlockType) {
    const child = this.makeBlock(type);

    this.emit(this.mapRecursive(this.blocks, b => {
      if (b.id !== parentId) return;

      // ‚ë† –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à—ë–Ω –ª–∏ —Ç–∞–∫–æ–π —Ç–∏–ø –ø–æ—Ç–æ–º–∫–∞
      if (!ALLOWED[b.type].includes(type)) {
        console.warn(`${type} –Ω–µ–ª—å–∑—è –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤–Ω—É—Ç—Ä—å ${b.type}`);
        return;
      }

      // ‚ë° –ï—Å–ª–∏ —É –±–ª–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å children ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ç—É–¥–∞
      if (b.children) {
        b.children = [...b.children, child];
        return;
      }

      // ‚ë¢ –¢–∞–±–ª–∏—Ü–∞ ‚Äî –ø–æ–º–µ—â–∞–µ–º –≤ –ª–µ–≤—É—é‚Äë–≤–µ—Ä—Ö–Ω—é—é —è—á–µ–π–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
      if (b.table) {
        const firstCell = b.table[0][0];
        firstCell.children = firstCell.children ? [...firstCell.children, child] : [child];
        return;
      }

      // ‚ë£ –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ children
      b.children = [child];
    }));
  }

  /* ‚îÄ‚îÄ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚îÄ‚îÄ */
  removeBlock(id: string)             { this.emit(this.filterRecursive(this.blocks, id)); }
  moveUp(index: number)               { if (index>0){ const a=[ ...this.blocks ]; [a[index-1],a[index]]=[a[index],a[index-1]]; this.emit(a);} }
  moveDown(index: number)             { if (index<this.blocks.length-1){ const a=[ ...this.blocks ]; [a[index+1],a[index]]=[a[index],a[index+1]]; this.emit(a);} }
  updateBlockData(id: string, data: any){ this.emit(this.mapRecursive(this.blocks,b=>{ if(b.id===id) b.data=data;})); }

  /* ‚îÄ‚îÄ —Ç–∞–±–ª–∏—Ü–∞ ‚îÄ‚îÄ */
  addTableRow(tableId: string) {
    this.emit(this.mapRecursive(this.blocks,b=>{
      if(b.id===tableId && b.table){
        const cols = b.data.cols;
        const row  = Array.from({length: cols}, () => this.makeBlock('paragraph'));
        b.table    = [ ...b.table, row ];
        b.data.rows++;
      }
    }));
  }
  addTableCol(tableId: string) {
    this.emit(this.mapRecursive(this.blocks,b=>{
      if(b.id===tableId && b.table){
        b.table = b.table.map(r => [ ...r, this.makeBlock('paragraph') ]);
        b.data.cols++;
      }
    }));
  }
  removeTableRow(tableId: string, rowIdx: number) {
    this.emit(this.mapRecursive(this.blocks,b=>{
      if(b.id===tableId && b.table && b.table.length>1){
        b.table.splice(rowIdx,1);
        b.data.rows--;
      }
    }));
  }
  removeTableCol(tableId: string, colIdx: number) {
    this.emit(this.mapRecursive(this.blocks,b=>{
      if(b.id===tableId && b.table && b.data.cols>1){
        b.table.forEach(r => r.splice(colIdx,1));
        b.data.cols--;
      }
    }));
  }

  /* —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –ø–æ–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å */
  save() { console.log('üíæ LESSON ‚Üí', JSON.stringify(this.blocks, null, 2)); }
}
